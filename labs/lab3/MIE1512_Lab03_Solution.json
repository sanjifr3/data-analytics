{"paragraphs":[{"text":"/*\nLab 03\n\nIn this lab we will cover some more advanced features of SQL and SparkSQL, and perform independant analysis of a dataset.\n\nThe dataset we will be using if the bikeshare dataset describing bikeshare rides in the Bay Area over a the time period of Aug 2015 - Aug2016.\n\nFor more information on the dataset and for the full dataset, see: http://www.bayareabikeshare.com/open-data\n\n*/","dateUpdated":"2017-02-06T08:02:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928429_-1468479228","id":"20170204-145625_1443756782","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:02:49+0000","dateFinished":"2017-02-06T08:03:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:386","errorMessage":""},{"text":"// We start by downloading the zipped dataset, and extracting it.","dateUpdated":"2017-02-06T08:03:19+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928432_-1457321510","id":"20170204-173234_266737536","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:03:19+0000","dateFinished":"2017-02-06T08:03:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:387","errorMessage":""},{"text":"%sh\ncurl -o /resources/data/babs_open_data_year_3.zip https://s3.amazonaws.com/babs-open-data/babs_open_data_year_3.zip\nunzip -o -d /resources/data/babs/ /resources/data/babs_open_data_year_3.zip","dateUpdated":"2017-02-06T08:03:30+0000","config":{"colWidth":12,"editorMode":"ace/mode/sh","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928433_-1457706259","id":"20170204-173016_1033242246","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:03:30+0000","dateFinished":"2017-02-06T08:03:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:388","errorMessage":""},{"text":"// Now, lets look into the README file, as it describes the different files and the structure of the data in each file.\n// Note the different comments about the integrity of data, and potential problems with the analysis.\n// They are critical for a valid analysis, however for the purpose of this Lab that focus on the technical skills, we will ignore these comments.","dateUpdated":"2017-02-06T08:00:26+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486411068700_-1095575769","id":"20170206-195748_754208962","dateCreated":"2017-02-06T07:57:48+0000","dateStarted":"2017-02-06T08:00:26+0000","dateFinished":"2017-02-06T08:00:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:389","errorMessage":""},{"text":"%sh\ncat /resources/data/babs/README.txt","dateUpdated":"2017-02-06T08:03:50+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486410809738_-59491603","id":"20170206-195329_1262480335","dateCreated":"2017-02-06T07:53:29+0000","dateStarted":"2017-02-06T08:03:50+0000","dateFinished":"2017-02-06T08:03:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:390","errorMessage":""},{"text":"/* \nWe continue with loading and cleaning the main dataset: \"2016_trip_data.csv\"\n*/","dateUpdated":"2017-02-06T08:01:54+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928433_-1457706259","id":"20170204-150146_902022883","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:01:54+0000","dateFinished":"2017-02-06T08:01:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:391","errorMessage":""},{"text":"import java.sql.Timestamp\nimport org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\n\nval bikeshareRDD = sc.textFile(\"/resources/data/babs/201608_trip_data.csv\").map(line => line.split(\",\", -1).map(_.trim)).filter(line => line(0) != \"Trip ID\")","dateUpdated":"2017-02-07T02:15:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928433_-1457706259","id":"20170204-032003_2032099462","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-07T02:15:10+0000","dateFinished":"2017-02-07T02:15:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:392","errorMessage":"","focus":true},{"text":"bikeshareRDD.first","dateUpdated":"2017-02-06T08:04:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928433_-1457706259","id":"20170204-032719_1393823635","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:04:06+0000","dateFinished":"2017-02-06T08:04:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:393","errorMessage":""},{"text":"/* The fields in the dataset are:\n\nTrip ID,\nDuration,\nStart Time,\nStart Station,\nStart Terminal,\nEnd Date,\nEnd Station,\nEnd Terminal,\nBike #,\nSubscriber Type,\nZip Code \n\n*/","dateUpdated":"2017-02-06T06:18:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928434_-1456552012","id":"20170204-150209_150454045","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:394"},{"text":"// Trip class\ncase class Trip(                            // column index\n    tripID: Int,                            // 0\n    tripDuration: Int,                      // 1\n    startTime: java.sql.Timestamp,          // 2\n    startStation: String,                   // 3  \n    startTerminal: Int,                     // 4  \n    endTime: java.sql.Timestamp,            // 5\n    endStation: String,                     // 6 \n    endTerminal: Int,                       // 7  \n    bikeID: Int,                            // 8\n    subscriberType: String,                 // 9\n    zipCode: Int                            // 10\n  )\n\n// patching the String class with new functions that have a defualt value if conversion to another type fails.\nimplicit class StringConversion(val s: String) {\ndef toTypeOrElse[T](convert: String=>T, defaultVal: T) = try {\n    convert(s)\n  } catch {\n    case _: Throwable => defaultVal\n  }\n  \n  def toIntOrElse(defaultVal: Int = 0) = toTypeOrElse[Int](_.toInt, defaultVal)\n  def toDoubleOrElse(defaultVal: Double = 0D) = toTypeOrElse[Double](_.toDouble, defaultVal)\n  def toDateOrElse(defaultVal: java.sql.Timestamp = java.sql.Timestamp.valueOf(\"1970-01-01 00:00:00\")) = toTypeOrElse[java.sql.Timestamp](java.sql.Timestamp.valueOf(_), defaultVal)\n}\n\n//Fix the date format in this dataset\ndef fixDateFormat(orig: String): String = {\n    val splited_date = orig.split(\" \")\n    val fixed_date_parts = splited_date(0).split(\"/\").map(part => if (part.size == 1) \"0\" + part else part)\n    val fixed_date = List(fixed_date_parts(2), fixed_date_parts(0), fixed_date_parts(1)).mkString(\"-\")\n    val fixed_time = splited_date(1).split(\":\").map(part => if (part.size == 1) \"0\" + part else part).mkString(\":\")\n    fixed_date + \" \" + fixed_time + \":00\"\n}\n\n// clean up Ride fields and convert them to proper formats\ndef getTripCleaned(row:Array[String]):Trip = {\n  return Trip(\n    row(0).toIntOrElse(),\n    row(1).toIntOrElse(),\n    fixDateFormat(row(2)).toDateOrElse(),\n    row(3),\n    row(4).toIntOrElse(),\n    fixDateFormat(row(5)).toDateOrElse(),\n    row(6),\n    row(7).toIntOrElse(),\n    row(8).toIntOrElse(),\n    row(9),\n    row(10).toIntOrElse()\n  )\n}","dateUpdated":"2017-02-07T02:15:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928434_-1456552012","id":"20170204-032742_32643745","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-07T02:15:16+0000","dateFinished":"2017-02-07T02:15:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:395","errorMessage":"","focus":true},{"text":"// load the data into a DataFrame used for SparkSQL\nval trip = bikeshareRDD.map(r => getTripCleaned(r)).toDF()\n// register this data as an SQL table\ntrip.createOrReplaceTempView(\"trip\")\n","dateUpdated":"2017-02-07T02:15:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928434_-1456552012","id":"20170204-035110_1888554956","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-07T02:15:25+0000","dateFinished":"2017-02-07T02:15:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:396","errorMessage":"","focus":true},{"text":"%sql\nSELECT *\nFROM trip\nLIMIT 10","dateUpdated":"2017-02-06T08:06:55+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tripID","index":0,"aggr":"sum"}],"values":[{"name":"tripDuration","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tripID","index":0,"aggr":"sum"},"yAxis":{"name":"tripDuration","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928434_-1456552012","id":"20170204-035432_750192151","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:06:55+0000","dateFinished":"2017-02-06T08:06:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:397","errorMessage":""},{"text":"/*\nQuestion 1:\nShow for every hour in a day (0,1,2, ..., 23) the number of rides started at this hour, and the average trip duration of the rides starting in this hour. Are they correlated?\n*/","dateUpdated":"2017-02-06T05:58:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928434_-1456552012","id":"20170204-050703_752853127","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:398"},{"text":"%sql\nSELECT HOUR(startTime) hour, count(*), AVG(tripDuration)\nfrom trip\ngroup by HOUR(startTime)\norder by HOUR(startTime)","dateUpdated":"2017-02-06T08:07:40+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"hour","index":0,"aggr":"sum"}],"values":[{"name":"count(1)","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"hour","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928435_-1456936761","id":"20170204-050955_844452814","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:07:40+0000","dateFinished":"2017-02-06T08:07:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:399","errorMessage":""},{"text":"/*\nSome of the bikes are being moved by the staff from one station to another to maintain balance.\nWe can identify these cases by comparing the endStationID to the startStationID of the next ride of the bike.\n*/","dateUpdated":"2017-02-06T05:58:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928435_-1456936761","id":"20170204-060826_1948653478","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:400"},{"text":"// First, lets build a query that compare the endStationID of a ride with the startStationID of the next ride of the same bike\n// and take a peak at the top 20 items.","dateUpdated":"2017-02-06T06:59:33+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928435_-1456936761","id":"20170204-061052_865825831","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T06:59:33+0000","dateFinished":"2017-02-06T06:59:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:401","errorMessage":""},{"text":"%sql\nSELECT t1.bikeID, t1.endStation, t2.startStation\nFROM (\nselect bikeID, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t1 INNER JOIN (\nselect bikeID, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t2\nON t1.bikeID = t2.bikeID AND t2.rownum = t1.rownum+1\nlimit 20","dateUpdated":"2017-02-06T08:08:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"bikeID","index":0,"aggr":"sum"}],"values":[{"name":"endStation","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"bikeID","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928436_-1458860506","id":"20170204-053305_1102458276","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:08:01+0000","dateFinished":"2017-02-06T08:08:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:402","errorMessage":""},{"text":"/*\nQuestion 2.1: Calculate the percent of cases in which bikes were moved between rides (i.e., the percent of rides that started at a station that is different from the station the bike were last left)\n*/","dateUpdated":"2017-02-06T05:58:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928436_-1458860506","id":"20170204-051106_1467851240","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:403"},{"text":"%sql\nSELECT (t1.countMoved / t2.countALL) ratioMoved\nFROM\n(SELECT COUNT(*) as countMoved\nFROM (\nselect bikeID, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t1 INNER JOIN (\nselect bikeID, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t2\nON t1.bikeID = t2.bikeID AND t2.rownum = t1.rownum+1\nWHERE t1.endStation <> t2.startStation) t1 JOIN (SELECT COUNT(*) countAll from trip) t2","dateUpdated":"2017-02-06T08:08:34+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":84,"optionOpen":false,"keys":[{"name":"ratioMoved","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"ratioMoved","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928437_-1459245255","id":"20170204-145514_33533960","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:08:34+0000","dateFinished":"2017-02-06T08:08:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:404","errorMessage":""},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486432724576_1606762073","id":"20170207-015844_729305700","dateCreated":"2017-02-07T01:58:44+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3652","text":"// Question 2.2: Calculate this percentage on an hour by hour basis. Are there hours in which it is more likely to see bikes being moved?","dateUpdated":"2017-02-07T02:19:21+0000","errorMessage":""},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"hour","index":0,"aggr":"sum"}],"values":[{"name":"countMoved","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"hour","index":0,"aggr":"sum"},"yAxis":{"name":"countMoved","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486432879090_521182922","id":"20170207-020119_2057495381","dateCreated":"2017-02-07T02:01:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3722","text":"%sql\nSELECT tt1.hour, (tt1.countMoved / tt2.countALL) ratioMoved\nFROM\n(SELECT HOUR(t1.startTime) hour, COUNT(*) as countMoved\nFROM (\nselect bikeID, startTime, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t1 INNER JOIN (\nselect bikeID, startTime, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t2\nON t1.bikeID = t2.bikeID AND t2.rownum = t1.rownum+1\nWHERE t1.endStation <> t2.startStation\nGROUP BY HOUR(t1.startTime)) tt1 INNER JOIN (SELECT HOUR(startTime) hour, COUNT(*) countAll from trip group by HOUR(startTime)) tt2\nON tt1.hour = tt2.hour\norder by tt1.hour ASC","dateUpdated":"2017-02-07T02:17:24+0000","dateFinished":"2017-02-07T02:17:41+0000","dateStarted":"2017-02-07T02:17:24+0000","errorMessage":""},{"text":"// Question 2.3: Are there some bikes are being moved more often than other? Analyze the frequency of moves per bike and find out.","dateUpdated":"2017-02-07T02:19:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928437_-1459245255","id":"20170204-145516_1881024412","dateCreated":"2017-02-06T05:58:48+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:405","dateFinished":"2017-02-07T02:19:26+0000","dateStarted":"2017-02-07T02:19:26+0000","focus":true},{"text":"%sql\nSELECT t1.bikeID, COUNT((*)) countMoved\nFROM (\nselect bikeID, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t1 INNER JOIN (\nselect bikeID, startStation, endStation, row_number() OVER (PARTITION BY bikeID ORDER BY startTime ASC) rownum\nfrom trip\n) t2\nON t1.bikeID = t2.bikeID AND t2.rownum = t1.rownum+1\nWHERE t1.endStation <> t2.startStation\nGROUP BY t1.bikeID\nORDER BY countMoved DESC","dateUpdated":"2017-02-06T08:09:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"bikeID","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"bikeID","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928437_-1459245255","id":"20170204-145524_1391444857","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:09:01+0000","dateFinished":"2017-02-06T08:09:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:406","errorMessage":""},{"text":"// Additional dataset(201608_station_data.csv) can provide us with locations of each station (latitude, longitude)","dateUpdated":"2017-02-06T07:04:02+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486407794382_157205226","id":"20170206-190314_48579089","dateCreated":"2017-02-06T07:03:14+0000","dateStarted":"2017-02-06T07:04:03+0000","dateFinished":"2017-02-06T07:04:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:407","errorMessage":""},{"text":"val stationRDD = sc.textFile(\"/resources/data/babs/201608_station_data.csv\").map(line => line.split(\",\", -1).map(_.trim)).filter(line => line(0) != \"station_id\")\n\n// Data structure:\n// station_id,name,lat,long,dockcount,landmark,installation\n\n// Station class\ncase class Station(                     // column index\n    stationID: Int,                     // 0\n    stationName: String,                // 1\n    latitude: Double,                   // 2\n    longitude: Double,                  // 3  \n    dockCount: Int,                     // 4  \n    landmark: String                    // 5\n  )\n\n// clean up Ride fields and convert them to proper formats\ndef getStationCleaned(row:Array[String]):Station = {\n  return Station(\n    row(0).toIntOrElse(),\n    row(1),\n    row(2).toDoubleOrElse(),\n    row(3).toDoubleOrElse(),\n    row(4).toIntOrElse(),\n    row(5)\n  )\n}","dateUpdated":"2017-02-06T08:09:42+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486407846563_1588763939","id":"20170206-190406_493694589","dateCreated":"2017-02-06T07:04:06+0000","dateStarted":"2017-02-06T08:09:42+0000","dateFinished":"2017-02-06T08:09:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:408","errorMessage":""},{"text":"// load the data into a DataFrame used for SparkSQL\nval station = stationRDD.map(r => getStationCleaned(r)).toDF()\n// register this data as an SQL table\nstation.createOrReplaceTempView(\"station\")\n","dateUpdated":"2017-02-06T08:09:49+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486408242229_-1483524427","id":"20170206-191042_1735442628","dateCreated":"2017-02-06T07:10:42+0000","dateStarted":"2017-02-06T08:09:49+0000","dateFinished":"2017-02-06T08:09:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:409","errorMessage":""},{"text":"%sql\nSELECT *\nFROM station","dateUpdated":"2017-02-06T08:09:57+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486408846979_-1645028664","id":"20170206-192046_1139261120","dateCreated":"2017-02-06T07:20:46+0000","dateStarted":"2017-02-06T08:09:57+0000","dateFinished":"2017-02-06T08:09:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:410","errorMessage":""},{"text":"/*\nQuestion 3:\nCreate a query that includes all the fields of \"trip\" as well as \"startStationLat\", \"startStationLong\", \"endStationLat\", \"endStationLong\" that correspond to the latitude and longitude of the start and end stations (this information can be found in station table).\n*/","dateUpdated":"2017-02-06T07:40:17+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486408866923_-1970126161","id":"20170206-192106_747778292","dateCreated":"2017-02-06T07:21:06+0000","dateStarted":"2017-02-06T07:40:17+0000","dateFinished":"2017-02-06T07:40:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:411","errorMessage":""},{"text":"%sql\n\nSELECT trip.*, s1.latitude startStationLat, s1.longitude startStationLong, s2.latitude endStationLat, s2.longitude endStationLong\nFROM (trip INNER JOIN station s1 ON trip.startStation == s1.stationName) INNER JOIN station s2 ON trip.endStation == s2.stationName\n\nLIMIT 10","dateUpdated":"2017-02-06T08:10:06+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tripID","index":0,"aggr":"sum"}],"values":[{"name":"tripDuration","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tripID","index":0,"aggr":"sum"},"yAxis":{"name":"tripDuration","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486408924225_1362615308","id":"20170206-192204_1070176661","dateCreated":"2017-02-06T07:22:04+0000","dateStarted":"2017-02-06T08:10:06+0000","dateFinished":"2017-02-06T08:10:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:412","errorMessage":""},{"text":"// To make it easy for us to analyze this query in-depth, lets first save this query to a new table.\n// We do it by first creating a new spark DataFrame based on this query, and register a new table.\n// Paste your SQL query instead of \"SELECT ?\" in the following line of code:\n\nval tripStationDF = sqlContext.sql(\"SELECT trip.*, s1.latitude startStationLat, s1.longitude startStationLong, s2.latitude endStationLat, s2.longitude endStationLong FROM (trip INNER JOIN station s1 ON trip.startStation == s1.stationName) INNER JOIN station s2 ON trip.endStation == s2.stationName\")\ntripStationDF.createOrReplaceTempView(\"trip_station\")","dateUpdated":"2017-02-06T08:10:51+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486410024036_1293751833","id":"20170206-194024_1135331848","dateCreated":"2017-02-06T07:40:24+0000","dateStarted":"2017-02-06T08:10:51+0000","dateFinished":"2017-02-06T08:10:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:413","errorMessage":""},{"text":"// make sure it worked. the next query should work.","dateUpdated":"2017-02-06T07:43:54+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486410017686_-1857957915","id":"20170206-194017_1947998812","dateCreated":"2017-02-06T07:40:17+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:414","errorMessage":""},{"text":"%sql\nSELECT * FROM trip_station\nLIMIT 10","dateUpdated":"2017-02-06T08:10:57+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486410200808_-1263812024","id":"20170206-194320_1848308109","dateCreated":"2017-02-06T07:43:20+0000","dateStarted":"2017-02-06T08:10:57+0000","dateFinished":"2017-02-06T08:11:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:415","errorMessage":""},{"text":"/*\nThe great circle distance is the shortest distance between two points on the surface of a sphere. The Euclidean distance we used before is the length of a straight line between them, but it is a much less accurate estimation of distance. We will use the great circle distance to estimate the distance of each ride based on the start and end positions (longitude and latitude).\n\nFor more information and explanation of formula: https://en.wikipedia.org/wiki/Great-circle_distance\n\nWe will implement great circle distance as spark UDF function so we can use it in our SparkSQL queries.\nUser Defined Functions (UDF) are a way to extend Spark SQL syntax by defining new Column-based functions for transforming Datasets.\nFor more information on UDFs see: https://jaceklaskowski.gitbooks.io/mastering-apache-spark/content/spark-sql-udfs.html\n*/","dateUpdated":"2017-02-06T05:58:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928437_-1459245255","id":"20170204-061554_1420437111","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:416"},{"text":"val greatCircleDistance = (latitude1: Double, longitude1: Double, latitude2: Double, longitude2: Double) => {\n  val radLat1 = math.toRadians(latitude1)\n  val radLong1 = math.toRadians(longitude1)\n  val radLat2 = math.toRadians(latitude2)\n  val radLong2 = math.toRadians(longitude2)\n  val deltaLatitude = radLat2 - radLat1\n  val deltaLongitude = radLong2 - radLong1\n\n  val deltaR = 2.0 * math.asin(math.sqrt(math.pow(math.sin(deltaLatitude/2), 2) + (math.cos(radLat1) * math.cos(radLat2) * math.pow(math.sin(deltaLongitude/2), 2))))\n  val sphereRadius = 6371\n  val distanceKM = deltaR * sphereRadius\n  \n  distanceKM\n}","dateUpdated":"2017-02-06T08:11:05+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928438_-1458091008","id":"20170204-035708_2056278596","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:11:05+0000","dateFinished":"2017-02-06T08:11:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:417","errorMessage":""},{"text":"// register the function as a UDF function\nsqlContext.udf.register(\"greatCircleDistance\", greatCircleDistance)","dateUpdated":"2017-02-06T08:11:13+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928438_-1458091008","id":"20170204-040418_1145203021","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:11:13+0000","dateFinished":"2017-02-06T08:11:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:418","errorMessage":""},{"text":"%sql\nSELECT *, greatCircleDistance(startStationLat, startStationLong, endStationLat, endStationLong) gcDistance\nFROM trip_station\nORDER BY startTime\nLIMIT 10","dateUpdated":"2017-02-06T08:11:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tripID","index":0,"aggr":"sum"}],"values":[{"name":"tripDuration","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tripID","index":0,"aggr":"sum"},"yAxis":{"name":"tripDuration","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928438_-1458091008","id":"20170204-141808_439910415","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:11:24+0000","dateFinished":"2017-02-06T08:11:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:419","errorMessage":""},{"text":"// Question 4.1: Using the great circle distance, find the average distance per bikeID","dateUpdated":"2017-02-07T01:51:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928442_-1459630003","id":"20170204-042919_1004385176","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:420"},{"text":"%sql\nSELECT bikeID, AVG(greatCircleDistance(startStationLat, startStationLong, endStationLat, endStationLong)) avgGcDistance\nFROM trip_station\nGROUP BY bikeID\nORDER BY avgGcDistance DESC","dateUpdated":"2017-02-06T08:11:40+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928443_-1460014752","id":"20170204-145033_1480980491","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:11:40+0000","dateFinished":"2017-02-06T08:11:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:421","errorMessage":""},{"text":"/*\nQuestion 4.2: For every station, find the 5 longest rides (based on great circle distance) that started at this station\nHint: You probably want to consider using window functions (https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html)\n*/","dateUpdated":"2017-02-07T01:51:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928443_-1460014752","id":"20170204-145003_1032359306","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:422"},{"text":"%sql\nSELECT * FROM\n(\nSELECT startStation, greatCircleDistance(startStationLat, startStationLong, endStationLat, endStationLong) gcDistance,  ROW_NUMBER() OVER (PARTITION BY startStation ORDER BY greatCircleDistance(startStationLat, startStationLong, endStationLat, endStationLong) DESC) distRank\nFROM trip_station\n)\nWHERE distRank <= 5\nORDER BY startStation, distRank ASC","dateUpdated":"2017-02-06T08:11:54+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[{"name":"gcDistance","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"gcDistance","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928444_-1461938497","id":"20170204-145017_1462436756","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:11:54+0000","dateFinished":"2017-02-06T08:12:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:423","errorMessage":""},{"text":"/*\nWe consider the station activity to be the sum of all trip durations that started or ended at this station.\n\nFirst, lets calcuate the station activity for each station. In order to do these query we need to get a list of (tripDuration, stationID) tuples, where stationID is either startStationID or endStationID. To do this, we will use UNION. We create a relation of (tripDuration, stationID) where stationID is startStationID, and a relation of (tripDuration, stationID) where stationID is endStationID and we UNION the two relations. Then we can sum the tripDuration for each station.\n\nTo read more about UNION see: http://www.w3schools.com/sql/sql_union.asp\n*/","dateUpdated":"2017-02-06T05:58:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928444_-1461938497","id":"20170204-143842_1798087149","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:424"},{"text":"%sql\n\nSELECT station, SUM(tripDuration) stationActivity\nFROM\n(\n    SELECT tripDuration, startStation as station\n    FROM trip_station\n    UNION\n    SELECT tripDuration, endStation as station\n    FROM trip_station\n)\nGROUP BY station\nORDER BY stationActivity DESC","dateUpdated":"2017-02-06T08:12:09+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"station","index":0,"aggr":"sum"}],"values":[{"name":"stationActivity","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"stationActivity","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928445_-1462323246","id":"20170204-144122_803369972","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:12:09+0000","dateFinished":"2017-02-06T08:12:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:425","errorMessage":""},{"text":"/*\nQuestion 5: For each station we want to find the longest-distance (based on great circle distance) that has *started or ended* at this station.\n*/","dateUpdated":"2017-02-07T01:51:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928445_-1462323246","id":"20170204-144726_817673739","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:426"},{"text":"%sql\n\nSELECT station, MAX(gcDistance) longestTrip\nFROM\n(\n    SELECT greatCircleDistance(startStationLat, startStationLong, endStationLat, endStationLong) gcDistance, startStation as station\n    FROM trip_station\n    UNION\n    SELECT greatCircleDistance(startStationLat, startStationLong, endStationLat, endStationLong) gcDistance, endStation as station\n    FROM trip_station\n)\nGROUP BY station\nORDER BY longestTrip DESC","dateUpdated":"2017-02-06T08:12:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928445_-1462323246","id":"20170204-144937_2138189950","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:12:27+0000","dateFinished":"2017-02-06T08:12:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:427","errorMessage":""},{"text":"/*\nQuestion 6: Use the additional dataset \"201608_weather_data.csv\", perform an exploratory data analysis and look for interesting patterns.\nSpecifically, you can look into the relation between good/bad weather and the trip distance or trip length.\n*/","dateUpdated":"2017-02-07T01:57:37+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928446_-1461168999","id":"20170204-142203_1761933232","dateCreated":"2017-02-06T05:58:48+0000","dateStarted":"2017-02-06T08:01:22+0000","dateFinished":"2017-02-06T08:01:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:428","errorMessage":""},{"text":"","dateUpdated":"2017-02-06T05:58:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486403928446_-1461168999","id":"20170204-150312_764118641","dateCreated":"2017-02-06T05:58:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:429"}],"name":"MIE1512_Lab03B_Solution","id":"2CA9W1K6Z","angularObjects":{"2C1FSWPV5:shared_process":[],"2C2ANMC3H:shared_process":[],"2C27C2CAW:shared_process":[],"2C1EQ4DYT:shared_process":[],"2C2D85D6Q:shared_process":[],"2BYMYHYE7:shared_process":[],"2BZJ3HWCJ:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}